{"version":3,"sources":["components/Header.jsx","API/api.js","redux/task-reduser.js","components/Table.jsx","redux/redux-store.js","components/Form.jsx","components/content.jsx","components/Login.jsx","components/Edit.jsx","App.js","index.js"],"names":["Title","Typography","Header","developer","useSelector","state","task","span","offset","className","style","marginTop","level","href","type","to","keyboard","instanse","axios","create","baseURL","headers","API","page","get","then","response","bodyFormData","post","formData","username","id","SET_TASKS","SET_TOTAL_TASK_COUNT","SET_CURRENT_PAGE","SET_TOKEN","SET_DEVOLOPER","SET_EDIT","initialState","total_task_count","tasks","currentPage","token","isEdit","setTasks","setTotalTaskCount","setCurrentPages","setEdit","getTasks","dispatch","a","data","message","taskReducer","action","columns","title","dataIndex","key","editable","sorter","b","length","email","text","render","status","_Table","rows","dataSource","totatTask","useDispatch","useEffect","pagination","pageSize","total","current","onChange","defaultCurrent","showSizeChanger","redusers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","layout","labelCol","wrapperCol","Formik","name","onFinish","values","FormData","set","sendTask","user","validateMessages","required","types","number","Item","label","rules","TextArea","htmlType","Content","xs","md","tailLayout","Login","initialValues","remember","password","onFinishFailed","errorInfo","console","log","Password","Edit","taskId","useHistory","location","pathname","substr","find","editTask","placeholder","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8b91ff38.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Divider, Col, Typography, Row, Button } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nconst { Title } = Typography;\r\n\r\nexport const Header = () => {\r\n  const developer = useSelector((state) => state.task.developer);\r\n  return (\r\n    <Row>\r\n      <Col span={6} offset={6} className=\"gutter-row\" style={{ marginTop: 10 }}>\r\n        <Title level={2}>\r\n          Test task by <a href=\"https://github.com/al4iii\">al4ii</a>{\" \"}\r\n        </Title>\r\n      </Col>\r\n      <Col span={6} offset={6} className=\"gutter-row\">\r\n        {developer === \"al4i\" ? (\r\n          <Button type=\"primary\" style={{ marginTop: 20 }}>\r\n            <NavLink to={\"/login\"}>Login</NavLink>\r\n          </Button>\r\n        ) : (\r\n          <Text keyboard> {developer}</Text>\r\n        )}\r\n      </Col>\r\n      <Divider />\r\n    </Row>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst instanse = axios.create({\r\n  baseURL: \"https://uxcandy.com/~shapoval/test-task-backend/v2\",\r\n  headers: {\r\n    \"Content-Type\": \"multipart/form-data\",\r\n  },\r\n});\r\n\r\nexport const API = {\r\n  getTask: (developer, page = 1) => {\r\n    return instanse\r\n      .get(`?developer=${developer}&page=${page}`)\r\n      .then((response) => response);\r\n  },\r\n  sendTask: (bodyFormData, developer) => {\r\n    debugger;\r\n    return instanse\r\n      .post(`/create?developer=${developer}`, bodyFormData)\r\n      .then((response) => response);\r\n  },\r\n  login: (formData, username) => {\r\n    debugger;\r\n    return instanse\r\n      .post(`/login?developer=${username}`, formData)\r\n      .then((response) => response);\r\n  },\r\n  editTask: (formData, id, developer) => {\r\n    debugger;\r\n    return instanse\r\n      .post(`edit/${id}?developer=${developer}`, formData)\r\n      .then((response) => response);\r\n  },\r\n};\r\n","import { API } from \"../API/api\";\r\n\r\nconst SET_TASKS = \"task/SET_TASKS\";\r\nconst SET_TOTAL_TASK_COUNT = \"task/SET_TOTAL_TASK_COUNT\";\r\nconst SET_CURRENT_PAGE = \"task/SET_CURRENT_PAGE\";\r\nconst SET_TOKEN = \"task/SET_SET_TOKEN\";\r\nconst SET_DEVOLOPER = \"task/SET_DEVOLOPER\";\r\nconst SET_EDIT = \"task/SET_EDIT\";\r\n\r\nlet initialState = {\r\n  developer: \"al4i\",\r\n  total_task_count: 0,\r\n  tasks: [],\r\n  currentPage: 1,\r\n  token: null,\r\n  id: null,\r\n  isEdit: false,\r\n};\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_TASKS:\r\n      return { ...state, tasks: action.tasks };\r\n    case SET_TOTAL_TASK_COUNT:\r\n      return { ...state, total_task_count: action.total_task_count };\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case SET_TOKEN:\r\n      return {\r\n        ...state,\r\n        token: action.token,\r\n      };\r\n    case SET_DEVOLOPER:\r\n      return {\r\n        ...state,\r\n        developer: action.developer,\r\n      };\r\n    case SET_EDIT:\r\n      return {\r\n        ...state,\r\n        isEdit: action.isEdit,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setTasks = (tasks) => ({ type: SET_TASKS, tasks });\r\nexport const setToken = (token) => ({ type: SET_TOKEN, token });\r\nexport const setDevoloper = (developer) => ({ type: SET_DEVOLOPER, developer });\r\nexport const setTotalTaskCount = (total_task_count) => ({\r\n  type: SET_TOTAL_TASK_COUNT, total_task_count});\r\nexport const setCurrentPages = (currentPage) => ({\r\n  type: SET_CURRENT_PAGE, currentPage });\r\nexport const setEdit = (isEdit) => ({ type: SET_EDIT, isEdit });\r\n\r\nexport const getTasks = (developer, page = 1) => async (dispatch) => {\r\n    let response = await API.getTask(developer, page);\r\n    dispatch(setCurrentPages(page));\r\n    dispatch(setTasks(response.data.message.tasks));\r\n    dispatch(setTotalTaskCount(+response.data.message.total_task_count));\r\n};\r\nexport const sendTask = (email, name, text, developer) => async (dispatch) => {\r\n  const bodyFormData = new FormData();\r\n  bodyFormData.set(\"username\", name);\r\n  bodyFormData.set(\"email\", email);\r\n  bodyFormData.set(\"text\", text);\r\n  await API.sendTask(bodyFormData, developer);\r\n  dispatch(getTasks(developer, 1));\r\n};\r\nexport const login = (username, password) => async (dispatch) => {\r\n  const formData = new FormData();\r\n  formData.set(\"username\", username);\r\n  formData.set(\"password\", password);\r\n  let response = await API.login(formData, username);\r\n  dispatch(setToken(response.data.message.token));\r\n  if (!!response.data.message.token) {\r\n    dispatch(setDevoloper(username));\r\n    dispatch(getTasks(username, 1));\r\n  }\r\n};\r\nexport const editTask = (text, id, developer, token) => async (dispatch) => {\r\n  const formData = new FormData();\r\n  formData.set(\"text\", text);\r\n  formData.set(\"token\", token);\r\n  let response = await API.editTask(formData, id, developer);\r\n  if ((response.data.status = \"ok\")) {\r\n    dispatch(setEdit(true));\r\n    dispatch(getTasks(developer, 1));\r\n    dispatch(setEdit(false));\r\n  }\r\n};\r\n\r\nexport default taskReducer;\r\n","import React, { useEffect } from \"react\";\r\nimport { Table, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getTasks } from \"../redux/task-reduser\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"User name\",\r\n    dataIndex: \"username\",\r\n    key: \"username\",\r\n    editable: true,\r\n    sorter: (a, b) => a.username.length - b.username.length,\r\n  },\r\n  {\r\n    title: \"E-mail\",\r\n    dataIndex: \"email\",\r\n    key: \"email\",\r\n    sorter: (a, b) => a.email.length - b.email.length,\r\n  },\r\n  {\r\n    title: \"Task\",\r\n    dataIndex: \"text\",\r\n    key: \"text\",\r\n    sorter: (a, b) => a.text.length - b.text.length,\r\n  },\r\n  {\r\n    title: \"id\",\r\n    dataIndex: \"id\",\r\n    key: \"id\",\r\n    render: (id) => (\r\n      <Button type=\"primary\">\r\n        <NavLink to={`/edit/${id}`}>Edit</NavLink>\r\n      </Button>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (status) =>\r\n      status === 0 ? (\r\n        <Text type=\"danger\">task not completed</Text>\r\n      ) : status === 1 ? (\r\n        <Text type=\"danger\">task not completed, edited by admin</Text>\r\n      ) : status === 10 ? (\r\n        <Text type=\"success\">task completed</Text>\r\n      ) : status === 11 ? (\r\n        <Text type=\"success\">task edited by admin and completed</Text>\r\n      ) : (\r\n        \"\"\r\n      ),\r\n  },\r\n];\r\n\r\nexport const _Table = ({ rows = 3 }) => {\r\n  const dataSource = useSelector((state) => state.task.tasks);\r\n  const totatTask = useSelector((state) => state.task.total_task_count);\r\n  const currentPage = useSelector((state) => state.task.currentPage);\r\n  const developer = useSelector((state) => state.task.developer);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getTasks(developer, 1));\r\n  }, [developer]);\r\n  const onChange = (page) => {\r\n    dispatch(getTasks(developer, page));\r\n  };\r\n  return (\r\n    <Table\r\n      dataSource={dataSource}\r\n      columns={columns}\r\n      pagination={{\r\n        pageSize: rows,\r\n        total: totatTask,\r\n        current: currentPage,\r\n        onChange: onChange,\r\n        defaultCurrent: 1,\r\n        showSizeChanger: false,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport taskReducer from \"./task-reduser\";\r\n\r\nlet redusers = combineReducers({\r\n  task: taskReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(redusers, composeEnhancers(applyMiddleware(thunk)));\r\nwindow.store = store;\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { sendTask } from \"./../redux/task-reduser\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\n\r\nexport const Formik = () => {\r\n  const dispatch = useDispatch();\r\n  const validateMessages = {\r\n    required: \"${label} is required!\",\r\n    types: {\r\n      email: \"${label} is not a valid email!\",\r\n      number: \"${label} is not a valid number!\",\r\n    },\r\n  };\r\n  const developer = useSelector((state) => state.task.developer);\r\n  const onFinish = (values) => {  \r\n    dispatch( sendTask(values.user.email, values.user.name, values.user.text, developer));\r\n  };\r\n  return (\r\n    <Form\r\n      {...layout}\r\n      name=\"message\"\r\n      onFinish={onFinish}\r\n      validateMessages={validateMessages}\r\n    >\r\n      <Form.Item\r\n        name={[\"user\", \"name\"]}\r\n        label=\"name\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name={[\"user\", \"email\"]}\r\n        label=\"email\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            type: \"email\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name={[\"user\", \"text\"]}\r\n        label=\"Text\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input.TextArea />\r\n      </Form.Item>\r\n      <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Col, Row, Typography } from \"antd\";\r\nimport { _Table } from \"./Table\";\r\nimport { Formik } from \"./Form\";\r\nimport Title from \"antd/lib/typography/Title\";\r\n\r\nconst Content = () => {\r\n  return (\r\n    <>\r\n      <Col span={6} offset={6}>\r\n        <Title level={3}>Add new task</Title>\r\n      </Col>\r\n      <Col xs={24} md={{ span: 8, offset: 4 }}>\r\n        <Formik />\r\n      </Col>\r\n      <Row>\r\n        <Col xs={24} md={{ span: 12, offset: 6 }}>\r\n          <Typography.Title level={4}></Typography.Title>\r\n          <_Table />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../redux/task-reduser\";\r\nimport Content from \"./content\";\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 5 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n  const token = useSelector((state) => state.task.token);\r\n  const onFinish = (values) => {\r\n    dispatch(login(values.username, values.password));\r\n  };\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n  return (\r\n    <>\r\n      {!!token ? (\r\n        <Content />\r\n      ) : (\r\n        <Form\r\n          {...layout}\r\n          offset={8}\r\n          span={8}\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            rules={[{ required: true, message: \"Please input your username!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your password!\" }]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, Button, Col, Typography } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { editTask } from \"../redux/task-reduser\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nconst { Title } = Typography;\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 6,\r\n  },\r\n};\r\nexport const Edit = () => {\r\n  const isEdit = useSelector((state) => state.task.isEdit);\r\n  const tasks = useSelector((state) => state.task.tasks);\r\n  const history = useHistory();\r\n  const taskId = history.location.pathname.substr(6);\r\n  const message = tasks.find((message) => message.id === +taskId).text;\r\n  const developer = useSelector((state) => state.task.developer);\r\n  const token = useSelector((state) => state.task.token);\r\n  const dispatch = useDispatch();\r\n  const validateMessages = {\r\n    required: \"${label} is required!\",\r\n  };\r\n  const onFinish = (values) =>\r\n    dispatch(editTask(values.user.text, taskId, developer, token));\r\n  if (isEdit) {\r\n    return <Redirect to={\"/content\"} />;\r\n  }\r\n  return (\r\n    <>\r\n      {developer === \"al4i\" ? (\r\n        <Col span={8} offset={6} className=\"gutter-row\">\r\n          <Title level={3} type=\"danger\">\r\n            Only registered users can edit Tasks\r\n          </Title>\r\n          <Title level={4}>Login: admin</Title>\r\n          <Title level={4}>password: 123</Title>\r\n        </Col>\r\n      ) : (\r\n        <Form\r\n          {...layout}\r\n          name=\"message\"\r\n          onFinish={onFinish}\r\n          validateMessages={validateMessages}\r\n        >\r\n          <Form.Item\r\n            name={[\"user\", \"text\"]}\r\n            label=\"Text\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input.TextArea placeholder={message} />\r\n          </Form.Item>\r\n          <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { _Table } from \"./components/Table\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport Content from \"./components/content\";\nimport { Login } from \"./components/Login\";\nimport { Edit } from \"./components/Edit\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Provider store={store}>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to={\"/content\"} />} />\n          <Route path=\"/content\" render={() => <Content />} />\n          <Route exact path=\"/login\" render={() => <Login />} />\n          <Route path=\"/edit/:id?\" render={() => <Edit />} />\n        </Switch>\n      </Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}