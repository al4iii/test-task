{"version":3,"sources":["components/Header.jsx","API/api.js","redux/task-reduser.js","redux/redux-store.js","components/Table.jsx","components/Form.jsx","components/Content.jsx","components/Login.jsx","components/Edit.jsx","App.js","index.js"],"names":["Title","Typography","Header","React","memo","developer","useSelector","state","task","span","offset","className","level","style","marginTop","type","to","keyboard","instanse","axios","create","baseURL","headers","API","page","get","then","response","bodyFormData","post","formData","username","id","SET_TASKS","SET_TOTAL_TASK_COUNT","SET_CURRENT_PAGE","SET_TOKEN","SET_DEVOLOPER","SET_EDIT","initialState","total_task_count","tasks","currentPage","token","isEdit","setTasks","setTotalTaskCount","setCurrentPages","setEdit","getTasks","dispatch","a","data","message","taskReducer","action","redusers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","columns","title","dataIndex","key","editable","sorter","b","length","email","text","render","status","_Table","rows","dataSource","totatTask","useDispatch","useEffect","pagination","pageSize","total","current","onChange","defaultCurrent","showSizeChanger","layout","labelCol","wrapperCol","Formik","formRef","createRef","ref","name","onFinish","values","FormData","set","sendTask","user","resetFields","validateMessages","required","types","number","Item","label","rules","TextArea","htmlType","Content","xs","md","tailLayout","Login","initialValues","remember","password","onFinishFailed","errorInfo","console","log","Password","Edit","taskId","useHistory","location","pathname","substr","find","useState","setStatus","editTask","placeholder","Group","value","target","direction","App","exact","path","href","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9a4b9b1d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Divider, Col, Typography, Row, Button } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nconst { Title } = Typography;\r\n\r\nexport const Header = React.memo(() => {\r\n  const developer = useSelector((state) => state.task.developer);\r\n  return (\r\n    <Row>\r\n      <Col span={6} offset={6} className=\"gutter-row\">\r\n        <Title level={2} style={{ marginTop: 15 }}>\r\n          To Do List\r\n        </Title>\r\n      </Col>\r\n      <Col span={6} offset={6} className=\"gutter-row\">\r\n        {developer === \"al4i\" ? (\r\n          <Button type=\"primary\" style={{ marginTop: 20 }}>\r\n            <NavLink to={\"/login\"}>Login</NavLink>\r\n          </Button>\r\n        ) : (\r\n          <Row style={{ marginTop: 20 }}>\r\n            <Text keyboard> {developer}</Text>\r\n          </Row>\r\n        )}\r\n      </Col>\r\n      <Divider />\r\n    </Row>\r\n  );\r\n});\r\n","import axios from \"axios\";\r\n\r\nconst instanse = axios.create({\r\n  baseURL: \"https://uxcandy.com/~shapoval/test-task-backend/v2\",\r\n  headers: {\r\n    \"Content-Type\": \"multipart/form-data\",\r\n  },\r\n});\r\n\r\nexport const API = {\r\n  getTask: (developer, page = 1) => {\r\n    return instanse\r\n      .get(`?developer=${developer}&page=${page}`)\r\n      .then((response) => response);\r\n  },\r\n  sendTask: (bodyFormData, developer) => {  \r\n    return instanse\r\n      .post(`/create?developer=${developer}`, bodyFormData)\r\n      .then((response) => response);\r\n  },\r\n  login: (formData, username) => {  \r\n    return instanse\r\n      .post(`/login?developer=${username}`, formData)\r\n      .then((response) => response);\r\n  },\r\n  editTask: (formData, id, developer) => {\r\n    return instanse\r\n      .post(`edit/${id}?developer=${developer}`, formData)\r\n      .then((response) => response);\r\n  },\r\n};\r\n","import { API } from \"../API/api\";\r\n\r\nconst SET_TASKS = \"task/SET_TASKS\";\r\nconst SET_TOTAL_TASK_COUNT = \"task/SET_TOTAL_TASK_COUNT\";\r\nconst SET_CURRENT_PAGE = \"task/SET_CURRENT_PAGE\";\r\nconst SET_TOKEN = \"task/SET_SET_TOKEN\";\r\nconst SET_DEVOLOPER = \"task/SET_DEVOLOPER\";\r\nconst SET_EDIT = \"task/SET_EDIT\";\r\n\r\nlet initialState = {\r\n  developer: \"al4i\",\r\n  total_task_count: 0,\r\n  tasks: [],\r\n  currentPage: 1,\r\n  token: null,\r\n  id: null,\r\n  isEdit: false,\r\n};\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_TASKS:\r\n      return { ...state, tasks: action.tasks };\r\n    case SET_TOTAL_TASK_COUNT:\r\n      return { ...state, total_task_count: action.total_task_count };\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case SET_TOKEN:\r\n      return {\r\n        ...state,\r\n        token: action.token,\r\n      };\r\n    case SET_DEVOLOPER:\r\n      return {\r\n        ...state,\r\n        developer: action.developer,\r\n      };\r\n    case SET_EDIT:\r\n      return {\r\n        ...state,\r\n        isEdit: action.isEdit,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setTasks = (tasks) => ({ type: SET_TASKS, tasks });\r\nexport const setToken = (token) => ({ type: SET_TOKEN, token });\r\nexport const setDevoloper = (developer) => ({ type: SET_DEVOLOPER, developer });\r\nexport const setTotalTaskCount = (total_task_count) => ({\r\n  type: SET_TOTAL_TASK_COUNT, total_task_count});\r\nexport const setCurrentPages = (currentPage) => ({\r\n  type: SET_CURRENT_PAGE, currentPage });\r\nexport const setEdit = (isEdit) => ({ type: SET_EDIT, isEdit });\r\n\r\nexport const getTasks = (developer, page = 1) => async (dispatch) => {\r\n    let response = await API.getTask(developer, page);\r\n    dispatch(setCurrentPages(page));\r\n    dispatch(setTasks(response.data.message.tasks));\r\n    dispatch(setTotalTaskCount(+response.data.message.total_task_count));\r\n};\r\nexport const sendTask = (email, name, text, developer) => async (dispatch) => {\r\n  const bodyFormData = new FormData();\r\n  bodyFormData.set(\"username\", name);\r\n  bodyFormData.set(\"email\", email);\r\n  bodyFormData.set(\"text\", text);\r\n  await API.sendTask(bodyFormData, developer);\r\n  dispatch(getTasks(developer, 1));\r\n};\r\nexport const login = (username, password) => async (dispatch) => {\r\n  const formData = new FormData();\r\n  formData.set(\"username\", username);\r\n  formData.set(\"password\", password);\r\n  let response = await API.login(formData, username);\r\n  dispatch(setToken(response.data.message.token));\r\n  if (!!response.data.message.token) {\r\n    dispatch(setDevoloper(username));\r\n    dispatch(getTasks(username, 1));\r\n  }\r\n};\r\nexport const editTask = (text, id, developer, token, status) => async (dispatch) => {\r\n  const formData = new FormData();\r\n  formData.set(\"text\", text);\r\n  formData.set(\"token\", token);\r\n  formData.set(\"status\", status);\r\n  let response = await API.editTask(formData, id, developer);\r\n  if ((response.data.status = \"ok\")) {\r\n    dispatch(setEdit(true));\r\n    dispatch(getTasks(developer, 1));\r\n    dispatch(setEdit(false));\r\n  }\r\n};\r\n\r\nexport default taskReducer;\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport taskReducer from \"./task-reduser\";\r\n\r\nlet redusers = combineReducers({\r\n  task: taskReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(redusers, composeEnhancers(applyMiddleware(thunk)));\r\nwindow.store = store;\r\nexport default store;\r\n","import React, { useEffect } from \"react\";\r\nimport { Table, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getTasks } from \"../redux/task-reduser\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"User name\",\r\n    dataIndex: \"username\",\r\n    key: \"username\",\r\n    editable: true,\r\n    sorter: (a, b) => a.username.length - b.username.length,\r\n  },\r\n  {\r\n    title: \"E-mail\",\r\n    dataIndex: \"email\",\r\n    key: \"email\",\r\n    sorter: (a, b) => a.email.length - b.email.length,\r\n  },\r\n  {\r\n    title: \"Task\",\r\n    dataIndex: \"text\",\r\n    key: \"text\",\r\n    sorter: (a, b) => a.text.length - b.text.length,\r\n  },  \r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (status) =>\r\n      status === 0 ? (\r\n        <Text type=\"danger\">task not completed</Text>\r\n      ) : status === 1 ? (\r\n        <Text type=\"danger\">task not completed, edited by admin</Text>\r\n      ) : status === 10 ? (\r\n        <Text type=\"success\">task completed</Text>\r\n      ) : status === 11 ? (\r\n        <Text type=\"success\">task edited by admin and completed</Text>\r\n      ) : (\r\n        \"\"\r\n      ),\r\n  },\r\n  {\r\n    title: \" \",\r\n    dataIndex: \"id\",\r\n    key: \"id\",\r\n    render: (id) => (\r\n      <Button type=\"primary\">\r\n        <NavLink to={`/edit/${id}`}>Edit</NavLink>\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const _Table = React.memo(({ rows = 3 }) => {\r\n  const dataSource = useSelector((state) => state.task.tasks);\r\n  const totatTask = useSelector((state) => state.task.total_task_count);\r\n  const currentPage = useSelector((state) => state.task.currentPage);\r\n  const developer = useSelector((state) => state.task.developer);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getTasks(developer, 1));\r\n  }, [developer]);\r\n  const onChange = (page) => {\r\n    dispatch(getTasks(developer, page));\r\n  };\r\n  return (\r\n    <Table\r\n      dataSource={dataSource}\r\n      columns={columns}\r\n      pagination={{\r\n        pageSize: rows,\r\n        total: totatTask,\r\n        current: currentPage,\r\n        onChange: onChange,\r\n        defaultCurrent: 1,\r\n        showSizeChanger: false,\r\n      }}\r\n    />\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { sendTask } from \"./../redux/task-reduser\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\n\r\nexport const Formik = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n  const validateMessages = {\r\n    required: \"${label} is required!\",\r\n    types: {\r\n      email: \"${label} is not a valid email!\",\r\n      number: \"${label} is not a valid number!\",\r\n    },\r\n  };\r\n  const formRef = React.createRef()\r\n  const developer = useSelector((state) => state.task.developer);\r\n  const onFinish = (values) => {  \r\n    dispatch( sendTask(values.user.email, values.user.name, values.user.text, developer));\r\n    formRef.current.resetFields()\r\n  };\r\n  return (\r\n    <Form\r\n      ref={formRef}\r\n      {...layout}\r\n      name=\"message\"\r\n      onFinish={onFinish}\r\n      validateMessages={validateMessages}\r\n    >\r\n      <Form.Item\r\n        name={[\"user\", \"name\"]}\r\n        label=\"name\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name={[\"user\", \"email\"]}\r\n        label=\"email\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            type: \"email\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name={[\"user\", \"text\"]}\r\n        label=\"Text\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input.TextArea />\r\n      </Form.Item>\r\n      <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { Col, Row, Typography } from \"antd\";\r\nimport { _Table } from \"./Table\";\r\nimport { Formik } from \"./Form\";\r\nimport Title from \"antd/lib/typography/Title\";\r\n\r\nconst Content = React.memo(() => {\r\n  return (\r\n    <>\r\n      <Col span={6} offset={6}>\r\n        <Title level={3}>Add new task</Title>\r\n      </Col>\r\n      <Col xs={24} md={{ span: 8, offset: 4 }}>\r\n        <Formik />\r\n      </Col>\r\n      <Row>\r\n        <Col xs={24} md={{ span: 12, offset: 6 }}>\r\n          <Typography.Title level={4}></Typography.Title>\r\n          <_Table />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../redux/task-reduser\";\r\nimport Content from \"./Content\";\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 5 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nexport const Login = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n  const token = useSelector((state) => state.task.token);\r\n  const onFinish = (values) => {\r\n    dispatch(login(values.username, values.password));\r\n  };\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n  return (\r\n    <>\r\n      {!!token ? (\r\n        <Content />\r\n      ) : (\r\n        <Form\r\n          {...layout}\r\n          offset={8}\r\n          span={8}\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            rules={[{ required: true, message: \"Please input your username!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your password!\" }]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import React, { useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, Button, Col, Typography, Space, Radio } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { editTask } from \"../redux/task-reduser\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nconst { Title } = Typography;\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 6,\r\n  },\r\n};\r\nexport const Edit = React.memo(() => {\r\n  const isEdit = useSelector((state) => state.task.isEdit);\r\n  const tasks = useSelector((state) => state.task.tasks);\r\n  const history = useHistory();\r\n  const taskId = history.location.pathname.substr(6);\r\n  const message = tasks.find((message) => message.id === +taskId).text;\r\n  const developer = useSelector((state) => state.task.developer);\r\n  const token = useSelector((state) => state.task.token);\r\n  const dispatch = useDispatch();\r\n  const [status, setStatus] = useState(0);\r\n  const validateMessages = {\r\n    required: \"${label} is required!\",\r\n  };\r\n  const onFinish = (values) =>\r\n    dispatch(editTask(values.user.text, taskId, developer, token, status));\r\n  if (isEdit) {\r\n    return <Redirect to={\"/content\"} />;\r\n  }\r\n  const onChange = (value) => {\r\n    setStatus(value.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      {developer === \"al4i\" ? (\r\n        <Col span={8} offset={6} className=\"gutter-row\">\r\n          <Title level={3} type=\"danger\">\r\n            Only registered users can edit Tasks\r\n          </Title>\r\n          <Title level={4}>Login: admin</Title>\r\n          <Title level={4}>password: 123</Title>\r\n        </Col>\r\n      ) : (\r\n        <Form\r\n          {...layout}\r\n          name=\"message\"\r\n          onFinish={onFinish}\r\n          validateMessages={validateMessages}\r\n        >\r\n          <Form.Item name={[\"user\", \"text\"]} label=\"Text\">\r\n            <Input.TextArea placeholder={message} />\r\n          </Form.Item>\r\n          <Radio.Group onChange={onChange}>\r\n            <Space direction=\"vertical\">\r\n              <Col span={8} offset={15} className=\"gutter-row\">\r\n                <Radio value={0}>Task not completed</Radio>\r\n                <Radio value={1}>Task not completed, edited by admin</Radio>\r\n                <Radio value={10}>Task completed</Radio>\r\n                <Radio value={11}>Task edited by admin and completed</Radio>\r\n              </Col>\r\n            </Space>\r\n          </Radio.Group>\r\n          <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginTop: 20 }}>\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport Content from \"./components/Content\";\nimport { Login } from \"./components/Login\";\nimport { Edit } from \"./components/Edit\";\nimport { Footer } from \"antd/lib/layout/layout\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Provider store={store}>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to={\"/content\"} />} />\n          <Route path=\"/content\" render={() => <Content />} />\n          <Route exact path=\"/login\" render={() => <Login />} />\n          <Route path=\"/edit/:id?\" render={() => <Edit />} />\n        </Switch>\n        <Footer>Created by<a href=\"https://github.com/al4iii\">al4ii</a></Footer>\n      </Provider>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}